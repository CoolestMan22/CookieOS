os.loadAPI("apis/cUtils.lua")
os.loadAPI("apis/utils.lua")

local args = { ... }
local periphList = peripheral.getNames()

for i = 1, #periphList do
    if peripheral.getType(periphList[i]) == "modem" then
        rednet.open(periphList[i])
    else
        cUtils.displayAccessDenied("No modem found")
        cUtils.sleep(2)
        os.reboot()
    end
end

local function rednetClose()
    for i = 1, #periphList do
        if peripheral.getType(periphList[i]) == "modem" then
            rednet.close(periphList[i])
        end
    end
end

local file = fs.open("ios/security/.keys", "r")
file.readLine()                    -- First line in file
file.readLine()                    -- Second line in file
local encryptKey = file.readLine() -- Third line in file
local rednetKey = file.readLine()  -- Fourth line in file

shell.run("cd ios/programs/s-g-file")
cUtils.tClear()
cUtils.tSetCursorPos(1, 1)

if #args < 1 then
    print("Usage | <> Required [] Optional")
    print(".sendfile [Computer ID] <File> ")
    return
end

cUtils.tClearLine()
cUtils.tSetTextColor(colors.yellow)
cUtils.tWrite("> ")
cUtils.tSetTextColor(colors.white)

if #args == 1 then
    cUtils.tSetCursorPos(1, 1)
    if fs.exists(args[1]) then
        fileExists = true
        -- Check if file is a system file
        if string.find((args[1]), "startup") or string.find(args[1], "sendfile") or string.find(args[1], "key") or string.find(args[1], "receivefile") then
            cUtils.tSetTextColor(colors.red)
            cUtils.displayAccessDenied("ABORTING. ATTEMPTED TO SEND A SYSTEM FILE")
            cUtils.logToOS("[M:05.5] Attempted to send a system file (" ..
            args[1] .. ")" .. " to ID: " .. args[1] .. " at " .. cUtils.getTime())
            cUtils.tSetTextColor(colors.white)
            cUtils.sleep(2)
            rednetClose()
            os.reboot()
        else

            local filee = fs.open(args[1], "r")
            local fileData = filee.readAll()

            if fileData == nil then
                cUtils.tClear()
                cUtils.displayAccessDenied("File is empty")
                cUtils.logToOS("[M:05.3] Attempted to send empty file: " .. args[1] .. " at " .. cUtils.getTime())
                cUtils.sleep(2)
                os.reboot()
            else
                cUtils.slowPrint("Sending File: " .. args[1])
                cUtils.logToOS("[M:05.1] Broadcasting file " .. args[1] .. " at " .. cUtils.getTime())
                rednet.broadcast(utils.Package(encryptKey, rednetKey))
                rednet.broadcast(utils.Package(rednetKey, args[1]))
                rednet.broadcast(utils.Package(encryptKey, fileData))
                cUtils.logToOS("[M:05] Broadcasted file " .. args[1] .. " at " .. cUtils.getTime())
                rednetClose()

                file.close()
            end
        end
    else
        cUtils.displayAccessDenied("File: " .. args[1] .. " does not exist!")
        cUtils.logToOS("[M:05.4] Attempted to send invalid file: " .. args[1] .. " at " .. cUtils.getTime())
        rednetClose()
        cUtils.sleep(2)
        os.reboot()
    end
else
    if fs.exists(args[2]) then
        args[1] = tonumber(args[1])
        -- Check if file is a system file
        if string.find(args[2], "startup") or string.find(args[2], "sendfile") or string.find(args[2], "key") or string.find(args[2], "receivefile") then
            cUtils.tSetTextColor(colors.red)
            cUtils.displayAccessDenied("ABORTING. ATTEMPTED TO SEND A SYSTEM FILE")
            cUtils.logToOS("[M:05.5] Attempted to send a system file (" ..
            args[2] .. ")" .. " to ID: " .. args[1] .. " at " .. cUtils.getTime())
            cUtils.tSetTextColor(colors.white)
            cUtils.sleep(2)
            rednetClose()
            os.reboot()
        else
            local fileee = fs.open(args[2], "r")
            local fileData = fileee.readAll()

            if fileData == nil then
                cUtils.tClear()
                --cUtils.displayAccessDenied("File is empty")
                cUtils.logToOS("[M:05.3] Attempted to send empty file: " .. args[2] .. " at " .. cUtils.getTime())
                cUtils.sleep(2)
                os.reboot()
            else
                cUtils.slowPrint("Sending File: " .. args[2])
                cUtils.logToOS("[M:05.1] Sending file " .. args[2] .. " to ID: " .. args[1] .. " at " .. cUtils.getTime())
                rednet.send(args[1], utils.Package(encryptKey, rednetKey))
                rednet.send(args[1], utils.Package(rednetKey, tostring(args[2])))
                rednet.send(args[1], utils.Package(encryptKey, fileData))
                cUtils.logToOS("[M:05] Sent file " .. args[2] .. " to ID: " .. args[1] .. " at " .. cUtils.getTime())
                rednetClose()
                file.close()
                cUtils.displayAccessGranted("File sent!")
                os.sleep(1)
                cUtils.tClear()
                shell.run("../../.menu")
            end
        end
    else
        cUtils.displayAccessDenied("File: " .. args[2] .. " does not exist!")
        cUtils.logToOS("[M:05.4] Attempted to send invalid file: " .. args[2] .. " at " .. cUtils.getTime())
        rednetClose()
        cUtils.sleep(2)
        os.reboot()
    end
end
